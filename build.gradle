plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
}

configure(subprojects.findAll { it.name != 'commons' }) {

    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'org.springframework.boot'

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {

        annotationProcessor(
                'org.springframework.boot:spring-boot-configuration-processor',
                'org.mapstruct:mapstruct-processor:1.4.0.Final',
                'org.projectlombok:lombok',
        )

        compileOnly(
                'org.projectlombok:lombok',
        )

        testAnnotationProcessor(
                'org.mapstruct:mapstruct-processor:1.4.0.Final',
                'org.projectlombok:lombok',
        )

        testCompileOnly(
                'org.projectlombok:lombok',
        )

        implementation(
                project(':commons'),
                'org.liquibase:liquibase-core',
                "org.postgresql:postgresql:42.2.13",
                'org.testcontainers:postgresql:1.15.2',
                'org.mapstruct:mapstruct:1.4.0.Final',

                // logging
                'org.slf4j:slf4j-api:1.7.30',
                'ch.qos.logback:logback-core:1.2.3',
                'net.logstash.logback:logstash-logback-encoder:6.2',
                'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.11.3',
        )

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

    }

    test {
        useJUnitPlatform()
    }

    compileJava {
        // Suppress warnings generated by mapstruct
        options.compilerArgs = [
                '-Amapstruct.unmappedTargetPolicy=IGNORE'
        ]
    }

}

